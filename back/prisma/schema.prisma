generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id         String         @id @default(uuid())
  user_name       String         @db.VarChar(50)
  user_lastname   String         @db.VarChar(50)
  nDni            Int?           @unique
  birthday        DateTime?
  phone           String?
  country         String?
  profile_picture String?
  isOlder         Boolean
  role_id         String
  credential_id   String?        @unique
  commission      Commission?
  companies       Company[]
  notifications   Notification[]
  credential      Credential?    @relation(fields: [credential_id], references: [credential_id])
  role            Role           @relation(fields: [role_id], references: [role_id])

  @@map("users")
}

model Credential {
  credential_id String @id @default(uuid())
  email         String @unique @db.VarChar(255)
  password      String @db.VarChar(255)
  user          User?

  @@map("credentials")
}

model Role {
  role_id          String           @id @default(uuid())
  role_name        String           @db.VarChar(50)
  role_description String           @db.VarChar(255)
  permissions      RolePermission[]
  users            User[]

  @@map("roles")
}

model Permission {
  permission_id          String           @id @default(uuid())
  permission_name        String           @db.VarChar(50)
  permission_description String           @db.VarChar(255)
  roles                  RolePermission[]

  @@map("permissions")
}

model RolePermission {
  role_id       String
  permission_id String
  permission    Permission @relation(fields: [permission_id], references: [permission_id])
  role          Role       @relation(fields: [role_id], references: [role_id])

  @@id([role_id, permission_id])
  @@map("roles_permissions")
}

model Company {
<<<<<<< HEAD
  company_id                 String             @id @default(uuid())
  user_id                    String   
  company_name               String             @db.VarChar(50)
  tax_identification_number  Int
  address                    String             @db.VarChar(255)
  postal_code                String             @db.VarChar(20)
  city                       String
  state                      String
  country                    String
  industry                   String   
  website                    String?
  account_paypal             String?
  company_description        String?
  company_logo               String?
  isActive                   Boolean            @default(true) 

  // Relaciones
  user                       User               @relation(fields: [user_id], references: [user_id])
  products                   CompanyProduct[]   
  shippingAddresses          ShippingAddress[]  
  orders                     Order[]            
  discounts                  Discount[]         
  farmer_certifications      FarmerCertification[] 
  supply_chain               SupplyChain[]
  payment                    Payment?       @relation()
=======
  company_id                String                @id @default(uuid())
  user_id                   String
  company_name              String                @db.VarChar(50)
  tax_identification_number Int
  address                   String                @db.VarChar(255)
  postal_code               String                @db.VarChar(20)
  city                      String
  state                     String
  country                   String
  industry                  String
  website                   String?
  account_paypal            String?
  company_description       String?
  company_logo              String?
  isActive                  Boolean               @default(true)
  user                      User                  @relation(fields: [user_id], references: [user_id])
  products                  CompanyProduct[]
  discounts                 Discount[]
  farmer_certifications     FarmerCertification[]
  orders                    Order[]
  payment                   Payment?
  addresses                 ShippingAddress[]
  supply_chain              SupplyChain?
>>>>>>> 17f30f536b6442113aa7863293c56b853bec62ac

  @@map("companies")
}

model Commission {
  commissions_id       String   @id @default(uuid())
  user_id              String?  @unique
  commision_percentage Float
  commision_date       DateTime
  user                 User?    @relation(fields: [user_id], references: [user_id])

  @@map("commissions")
}

model Notification {
  notification_id   String       @id @default(uuid())
  user_id           String
  discount_id       String?
  order_id          String?
  supply_chain_id   String?
  task_id           String
  message           String
  type              String
  isRead            Boolean      @default(false)
  notification_date DateTime
  discount          Discount?    @relation(fields: [discount_id], references: [discount_id])
  order             Order?       @relation(fields: [order_id], references: [order_id])
  supply_chain      SupplyChain? @relation(fields: [supply_chain_id], references: [supply_chain_id])
  task              Task         @relation(fields: [task_id], references: [task_id])
  user              User         @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("notifications")
}

model Task {
  task_id       String         @id @default(uuid())
  task_name     String
  task_status   String
  task_message  String
  executed_date DateTime?
  nextRun_date  DateTime?
  create_date   DateTime       @default(now())
  update_date   DateTime       @updatedAt
  notifications Notification[]

  @@map("tasks")
}

model CompanyProduct {
  company_product_id          String                              @id @default(uuid())
  farmer_id                   String?
  company_id                  String
  category_id                 String
  order_details_id            String?
  discount_id                 String?
  company_product_name        String
  company_product_description String?
<<<<<<< HEAD
  stock                      Int
  minimum_order              Int                @default(5)
  origin                     String
  company_price_x_kg         Float
  total_price                Float
  harvest_date               DateTime
  company_product_img        String
  calories                   Float?
  fat                        Float?
  protein                    Float?
  carbs                      Float?
  isActive                   Boolean            @default(true)
=======
  stock                       Int
  minimum_order               Int                                 @default(5)
  origin                      String
  company_price_x_kg          Float
  total_price                 Float
  harvest_date                DateTime
  company_product_img         String
  calories                    Float?
  fat                         Float?
  protein                     Float?
  carbs                       Float?
  category                    Category                            @relation("CategoryProducts", fields: [category_id], references: [category_id])
  company                     Company                             @relation(fields: [company_id], references: [company_id])
  orderDetails                OrderDetailProduct[]
  productCertifications       CompanyProductFarmerCertification[]
  productDiscounts            CompanyProductDiscount[]
>>>>>>> 17f30f536b6442113aa7863293c56b853bec62ac

  @@map("company_products")
}

model ShippingAddress {
<<<<<<< HEAD
  shipping_address_id       String    @id @default(uuid()) 
  company_id                String    
  contact_name              String
  contact_lastname          String
  contact_phone             String?
  contact_email             String
  delivery_hours            String?
  address                   String    @db.VarChar(255)
  postal_code               String    @db.VarChar(20)
  city                      String
  state                     String
  country                   String
  isActive                  Boolean            @default(true) 
=======
  shipping_address_id String  @id @default(uuid())
  company_id          String
  contact_name        String
  contact_lastname    String
  contact_phone       String
  contact_email       String
  delivery_hours      String
  address             String  @db.VarChar(255)
  postal_code         String  @db.VarChar(20)
  city                String
  state               String
  country             String
  order               Order?
  company             Company @relation(fields: [company_id], references: [company_id])
>>>>>>> 17f30f536b6442113aa7863293c56b853bec62ac

  @@map("shipping_addresses")
}

model Category {
  category_id   String           @id @default(uuid())
  name_category String           @unique
  products      CompanyProduct[] @relation("CategoryProducts")

  @@map("categories")
}

model Discount {
  discount_id      String                   @id @default(uuid())
  company_id       String
  code             String                   @unique
  percentage       Float
  code_status      String
  company          Company                  @relation(fields: [company_id], references: [company_id])
  notifications    Notification[]
  productDiscounts CompanyProductDiscount[]

  @@map("discounts")
}

model FarmerCertification {
  farmer_id                  String                              @id @default(uuid())
  company_id                 String
  phytosanitary_certificate  String
  agricultural_producer_cert String
  organic_certification      String?
  quality_certificate        String
  certificate_of_origin      String
  company                    Company                             @relation(fields: [company_id], references: [company_id])
  productCertifications      CompanyProductFarmerCertification[]

  @@map("farmer_certifications")
}

model CompanyProductDiscount {
  discount_id        String
  company_product_id String
  companyProduct     CompanyProduct @relation(fields: [company_product_id], references: [company_product_id])
  discount           Discount       @relation(fields: [discount_id], references: [discount_id])

  @@id([discount_id, company_product_id])
  @@map("product_discounts")
}

model CompanyProductFarmerCertification {
  farmer_id           String
  company_product_id  String
  companyProduct      CompanyProduct      @relation(fields: [company_product_id], references: [company_product_id])
  farmerCertification FarmerCertification @relation(fields: [farmer_id], references: [farmer_id])

  @@id([farmer_id, company_product_id])
  @@map("product_certifications")
}

model Order {
  order_id            String           @id @default(uuid())
  id_company_sell     String
  id_payments         String?
  shipping_address_id String?          @unique
  order_details_id    String           @unique
  suppy_chain_id      String?
  order_date          DateTime
  payment_id          String?          @unique
  notifications       Notification[]
  company             Company          @relation(fields: [id_company_sell], references: [company_id])
  orderDetail         OrderDetail      @relation(fields: [order_details_id], references: [order_details_id])
  payment             Payment?         @relation(fields: [payment_id], references: [payment_id])
  shipping_address    ShippingAddress? @relation(fields: [shipping_address_id], references: [shipping_address_id])
  supply_chain        SupplyChain?

  @@map("orders")
}

model OrderDetail {
  order_details_id String               @id @default(uuid())
  iva              Float
  total            Float
  order_status     String
  companyProducts  OrderDetailProduct[]
  order            Order?

  @@map("order_details")
}

model OrderDetailProduct {
  order_details_id   String
  company_product_id String
  companyProduct     CompanyProduct @relation(fields: [company_product_id], references: [company_product_id])
  orderDetail        OrderDetail    @relation(fields: [order_details_id], references: [order_details_id])

  @@id([order_details_id, company_product_id])
  @@map("order_detail_products")
}

model SupplyChain {
  supply_chain_id     String         @id @default(uuid())
  order_id            String         @unique
  updateBy_company_id String         @unique
  update_date         DateTime
  shipping_status     String
  notifications       Notification[]
  order               Order          @relation(fields: [order_id], references: [order_id])
  updatedByCompany    Company        @relation(fields: [updateBy_company_id], references: [company_id])

  @@map("supply_chain")
}

model Payment {
  payment_id       String   @id @default(uuid())
  company_id       String   @unique
  status           String
  amount_decimal   Float
  currency         String
  payment_provider String
  transaction_id   String
  payer_id         String
  description      String?
  payment_method   String
  is_verified      Boolean  @default(false)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  order            Order?
  company          Company  @relation(fields: [company_id], references: [company_id])

  @@map("payments")
}
